//This file is automatically generated by generator.lua from https://github.com/cimgui/cimguizmo
//based on ImGuizmo.h file version 1.91.3 WIP from https://github.com/CedricGuillemet/ImGuizmo
#ifndef CIMGUIZMO_INCLUDED
#define CIMGUIZMO_INCLUDED

//#include "cimgui.h"

#ifdef CIMGUI_DEFINE_ENUMS_AND_STRUCTS

typedef struct ImGuiWindow ImGuiWindow;
struct ImGuiWindow;
typedef enum { //< @r-lyeh: prefixed all enums here with ImGuizmo_
      ImGuizmo_TRANSLATE_X = (1u << 0),
      ImGuizmo_TRANSLATE_Y = (1u << 1),
      ImGuizmo_TRANSLATE_Z = (1u << 2),
      ImGuizmo_ROTATE_X = (1u << 3),
      ImGuizmo_ROTATE_Y = (1u << 4),
      ImGuizmo_ROTATE_Z = (1u << 5),
      ImGuizmo_ROTATE_SCREEN = (1u << 6),
      ImGuizmo_SCALE_X = (1u << 7),
      ImGuizmo_SCALE_Y = (1u << 8),
      ImGuizmo_SCALE_Z = (1u << 9),
      ImGuizmo_BOUNDS = (1u << 10),
      ImGuizmo_SCALE_XU = (1u << 11),
      ImGuizmo_SCALE_YU = (1u << 12),
      ImGuizmo_SCALE_ZU = (1u << 13),
      ImGuizmo_TRANSLATE = ImGuizmo_TRANSLATE_X | ImGuizmo_TRANSLATE_Y | ImGuizmo_TRANSLATE_Z,
      ImGuizmo_ROTATE = ImGuizmo_ROTATE_X | ImGuizmo_ROTATE_Y | ImGuizmo_ROTATE_Z | ImGuizmo_ROTATE_SCREEN,
      ImGuizmo_SCALE = ImGuizmo_SCALE_X | ImGuizmo_SCALE_Y | ImGuizmo_SCALE_Z,
      ImGuizmo_SCALEU = ImGuizmo_SCALE_XU | ImGuizmo_SCALE_YU | ImGuizmo_SCALE_ZU,
      ImGuizmo_UNIVERSAL = ImGuizmo_TRANSLATE | ImGuizmo_ROTATE | ImGuizmo_SCALEU
   }ImGuizmo_OPERATION;
typedef enum {
      ImGuizmo_LOCAL,
      ImGuizmo_WORLD
   }ImGuizmo_MODE;
typedef enum {
      ImGuizmo_DIRECTION_X,
      ImGuizmo_DIRECTION_Y,
      ImGuizmo_DIRECTION_Z,
      ImGuizmo_PLANE_X,
      ImGuizmo_PLANE_Y,
      ImGuizmo_PLANE_Z,
      ImGuizmo_SELECTION,
      ImGuizmo_INACTIVE,
      ImGuizmo_TRANSLATION_LINE,
      ImGuizmo_SCALE_LINE,
      ImGuizmo_ROTATION_USING_BORDER,
      ImGuizmo_ROTATION_USING_FILL,
      ImGuizmo_HATCHED_AXIS_LINES,
      ImGuizmo_TEXT,
      ImGuizmo_TEXT_SHADOW,
      ImGuizmo_COUNT
   }ImGuizmo_COLOR;
typedef struct ImGuizmo_Style ImGuizmo_Style;
struct ImGuizmo_Style
{
      float TranslationLineThickness;
      float TranslationLineArrowSize;
      float RotationLineThickness;
      float RotationOuterLineThickness;
      float ScaleLineThickness;
      float ScaleLineCircleSize;
      float HatchedAxisLineThickness;
      float CenterCircleSize;
      ImVec4 Colors[ImGuizmo_COUNT];
};
#else
#endif // CIMGUI_DEFINE_ENUMS_AND_STRUCTS

#ifndef CIMGUI_DEFINE_ENUMS_AND_STRUCTS
typedef ImGuizmo::Style ImGuizmo_Style;
typedef ImGuizmo::COLOR ImGuizmo_COLOR;
typedef ImGuizmo::MODE ImGuizmo_MODE;
typedef ImGuizmo::OPERATION ImGuizmo_OPERATION;
#endif //CIMGUI_DEFINE_ENUMS_AND_STRUCTS
CIMGUI_API void ImGuizmo_SetDrawlist(ImDrawList* drawlist);
CIMGUI_API void ImGuizmo_BeginFrame(void);
CIMGUI_API void ImGuizmo_SetImGuiContext(ImGuiContext* ctx);
CIMGUI_API bool ImGuizmo_IsOver_Nil(void);
CIMGUI_API bool ImGuizmo_IsUsing(void);
CIMGUI_API bool ImGuizmo_IsUsingViewManipulate(void);
CIMGUI_API bool ImGuizmo_IsUsingAny(void);
CIMGUI_API void ImGuizmo_Enable(bool enable);
CIMGUI_API void ImGuizmo_DecomposeMatrixToComponents(const float* matrix,float* translation,float* rotation,float* scale);
CIMGUI_API void ImGuizmo_RecomposeMatrixFromComponents(const float* translation,const float* rotation,const float* scale,float* matrix);
CIMGUI_API void ImGuizmo_SetRect(float x,float y,float width,float height);
CIMGUI_API void ImGuizmo_SetOrthographic(bool isOrthographic);
CIMGUI_API void ImGuizmo_DrawCubes(const float* view,const float* projection,const float* matrices,int matrixCount);
CIMGUI_API void ImGuizmo_DrawGrid(const float* view,const float* projection,const float* matrix,const float gridSize);
CIMGUI_API bool ImGuizmo_Manipulate(const float* view,const float* projection,ImGuizmo_OPERATION operation,ImGuizmo_MODE mode,float* matrix,float* deltaMatrix,const float* snap,const float* localBounds,const float* boundsSnap);
CIMGUI_API void ImGuizmo_ViewManipulate_Float(float* view,float length,ImVec2 position,ImVec2 size,ImU32 backgroundColor,float* extra);
CIMGUI_API void ImGuizmo_ViewManipulate_FloatPtr(float* view,const float* projection,ImGuizmo_OPERATION operation,ImGuizmo_MODE mode,float* matrix,float length,ImVec2 position,ImVec2 size,ImU32 backgroundColor);
CIMGUI_API void ImGuizmo_SetAlternativeWindow(ImGuiWindow* window);
CIMGUI_API void ImGuizmo_SetID(int id);
CIMGUI_API void ImGuizmo_PushID_Str(const char* str_id);
CIMGUI_API void ImGuizmo_PushID_StrStr(const char* str_id_begin,const char* str_id_end);
CIMGUI_API void ImGuizmo_PushID_Ptr(const void* ptr_id);
CIMGUI_API void ImGuizmo_PushID_Int(int int_id);
CIMGUI_API void ImGuizmo_PopID(void);
CIMGUI_API ImGuiID ImGuizmo_GetID_Str(const char* str_id);
CIMGUI_API ImGuiID ImGuizmo_GetID_StrStr(const char* str_id_begin,const char* str_id_end);
CIMGUI_API ImGuiID ImGuizmo_GetID_Ptr(const void* ptr_id);
CIMGUI_API bool ImGuizmo_IsOver_OPERATION(ImGuizmo_OPERATION op);
CIMGUI_API void ImGuizmo_SetGizmoSizeClipSpace(float value);
CIMGUI_API void ImGuizmo_AllowAxisFlip(bool value);
CIMGUI_API void ImGuizmo_SetAxisLimit(float value);
CIMGUI_API void ImGuizmo_SetAxisMask(bool x,bool y,bool z);
CIMGUI_API void ImGuizmo_SetPlaneLimit(float value);
CIMGUI_API bool ImGuizmo_IsOver_FloatPtr(float* position,float pixelRadius);
CIMGUI_API ImGuizmo_Style* Style_Style(void);
CIMGUI_API void Style_destroy(ImGuizmo_Style* self);
CIMGUI_API ImGuizmo_Style* ImGuizmo_GetStyle(void);



#endif //CIMGUIZMO_INCLUDED




